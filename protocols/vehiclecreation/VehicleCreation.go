// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vehiclecreation

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/DAVFoundation/captain/protocols/vehicle"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vehicle.GoUnusedProtection__
type VehicleCreation interface {
  // Parameters:
  //  - Vehicle
  CreateVehicle(vehicle *vehicle.VehicleDetails) (err error)
}

type VehicleCreationClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewVehicleCreationClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VehicleCreationClient {
  return &VehicleCreationClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewVehicleCreationClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VehicleCreationClient {
  return &VehicleCreationClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Vehicle
func (p *VehicleCreationClient) CreateVehicle(vehicle *vehicle.VehicleDetails) (err error) {
  if err = p.sendCreateVehicle(vehicle); err != nil { return }
  return p.recvCreateVehicle()
}

func (p *VehicleCreationClient) sendCreateVehicle(vehicle *vehicle.VehicleDetails)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("create_vehicle", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := VehicleCreationCreateVehicleArgs{
  Vehicle : vehicle,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *VehicleCreationClient) recvCreateVehicle() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "create_vehicle" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "create_vehicle failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_vehicle failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "create_vehicle failed: invalid message type")
    return
  }
  result := VehicleCreationCreateVehicleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type VehicleCreationProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler VehicleCreation
}

func (p *VehicleCreationProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *VehicleCreationProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *VehicleCreationProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewVehicleCreationProcessor(handler VehicleCreation) *VehicleCreationProcessor {

  self2 := &VehicleCreationProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["create_vehicle"] = &vehicleCreationProcessorCreateVehicle{handler:handler}
return self2
}

func (p *VehicleCreationProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x3

}

type vehicleCreationProcessorCreateVehicle struct {
  handler VehicleCreation
}

func (p *vehicleCreationProcessorCreateVehicle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := VehicleCreationCreateVehicleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("create_vehicle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := VehicleCreationCreateVehicleResult{}
  var err2 error
  if err2 = p.handler.CreateVehicle(args.Vehicle); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_vehicle: " + err2.Error())
    oprot.WriteMessageBegin("create_vehicle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("create_vehicle", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Vehicle
type VehicleCreationCreateVehicleArgs struct {
  Vehicle *vehicle.VehicleDetails `thrift:"vehicle,1,required" db:"vehicle" json:"vehicle"`
}

func NewVehicleCreationCreateVehicleArgs() *VehicleCreationCreateVehicleArgs {
  return &VehicleCreationCreateVehicleArgs{}
}

var VehicleCreationCreateVehicleArgs_Vehicle_DEFAULT *vehicle.VehicleDetails
func (p *VehicleCreationCreateVehicleArgs) GetVehicle() *vehicle.VehicleDetails {
  if !p.IsSetVehicle() {
    return VehicleCreationCreateVehicleArgs_Vehicle_DEFAULT
  }
return p.Vehicle
}
func (p *VehicleCreationCreateVehicleArgs) IsSetVehicle() bool {
  return p.Vehicle != nil
}

func (p *VehicleCreationCreateVehicleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVehicle bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVehicle = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVehicle{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Vehicle is not set"));
  }
  return nil
}

func (p *VehicleCreationCreateVehicleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Vehicle = &vehicle.VehicleDetails{}
  if err := p.Vehicle.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Vehicle), err)
  }
  return nil
}

func (p *VehicleCreationCreateVehicleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_vehicle_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VehicleCreationCreateVehicleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicle: ", p), err) }
  if err := p.Vehicle.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Vehicle), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicle: ", p), err) }
  return err
}

func (p *VehicleCreationCreateVehicleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VehicleCreationCreateVehicleArgs(%+v)", *p)
}

type VehicleCreationCreateVehicleResult struct {
}

func NewVehicleCreationCreateVehicleResult() *VehicleCreationCreateVehicleResult {
  return &VehicleCreationCreateVehicleResult{}
}

func (p *VehicleCreationCreateVehicleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VehicleCreationCreateVehicleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("create_vehicle_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VehicleCreationCreateVehicleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VehicleCreationCreateVehicleResult(%+v)", *p)
}


