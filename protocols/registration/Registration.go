// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package registration

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/DAVFoundation/captain/protocols/davuser"
	"github.com/DAVFoundation/captain/protocols/vehicle"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = davuser.GoUnusedProtection__
var _ = vehicle.GoUnusedProtection__
type Registration interface {
  // Parameters:
  //  - VehicleDetails
  RegisterVehicle(vehicleDetails *vehicle.VehicleDetails) (err error)
  // Parameters:
  //  - VehicleID
  DeregisterVehicle(vehicleID *davuser.DAVUser) (err error)
  // Parameters:
  //  - VehicleID
  VehicleIsRegistered(vehicleID *davuser.DAVUser) (r bool, err error)
}

type RegistrationClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewRegistrationClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RegistrationClient {
  return &RegistrationClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRegistrationClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RegistrationClient {
  return &RegistrationClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - VehicleDetails
func (p *RegistrationClient) RegisterVehicle(vehicleDetails *vehicle.VehicleDetails) (err error) {
  if err = p.sendRegisterVehicle(vehicleDetails); err != nil { return }
  return p.recvRegisterVehicle()
}

func (p *RegistrationClient) sendRegisterVehicle(vehicleDetails *vehicle.VehicleDetails)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("register_vehicle", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RegistrationRegisterVehicleArgs{
  VehicleDetails : vehicleDetails,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RegistrationClient) recvRegisterVehicle() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "register_vehicle" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "register_vehicle failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "register_vehicle failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "register_vehicle failed: invalid message type")
    return
  }
  result := RegistrationRegisterVehicleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - VehicleID
func (p *RegistrationClient) DeregisterVehicle(vehicleID *davuser.DAVUser) (err error) {
  if err = p.sendDeregisterVehicle(vehicleID); err != nil { return }
  return p.recvDeregisterVehicle()
}

func (p *RegistrationClient) sendDeregisterVehicle(vehicleID *davuser.DAVUser)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("deregister_vehicle", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RegistrationDeregisterVehicleArgs{
  VehicleID : vehicleID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RegistrationClient) recvDeregisterVehicle() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "deregister_vehicle" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deregister_vehicle failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deregister_vehicle failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deregister_vehicle failed: invalid message type")
    return
  }
  result := RegistrationDeregisterVehicleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}

// Parameters:
//  - VehicleID
func (p *RegistrationClient) VehicleIsRegistered(vehicleID *davuser.DAVUser) (r bool, err error) {
  if err = p.sendVehicleIsRegistered(vehicleID); err != nil { return }
  return p.recvVehicleIsRegistered()
}

func (p *RegistrationClient) sendVehicleIsRegistered(vehicleID *davuser.DAVUser)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("vehicle_is_registered", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RegistrationVehicleIsRegisteredArgs{
  VehicleID : vehicleID,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RegistrationClient) recvVehicleIsRegistered() (value bool, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "vehicle_is_registered" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "vehicle_is_registered failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "vehicle_is_registered failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "vehicle_is_registered failed: invalid message type")
    return
  }
  result := RegistrationVehicleIsRegisteredResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type RegistrationProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Registration
}

func (p *RegistrationProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RegistrationProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RegistrationProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRegistrationProcessor(handler Registration) *RegistrationProcessor {

  self6 := &RegistrationProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["register_vehicle"] = &registrationProcessorRegisterVehicle{handler:handler}
  self6.processorMap["deregister_vehicle"] = &registrationProcessorDeregisterVehicle{handler:handler}
  self6.processorMap["vehicle_is_registered"] = &registrationProcessorVehicleIsRegistered{handler:handler}
return self6
}

func (p *RegistrationProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x7

}

type registrationProcessorRegisterVehicle struct {
  handler Registration
}

func (p *registrationProcessorRegisterVehicle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RegistrationRegisterVehicleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("register_vehicle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RegistrationRegisterVehicleResult{}
  var err2 error
  if err2 = p.handler.RegisterVehicle(args.VehicleDetails); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing register_vehicle: " + err2.Error())
    oprot.WriteMessageBegin("register_vehicle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("register_vehicle", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type registrationProcessorDeregisterVehicle struct {
  handler Registration
}

func (p *registrationProcessorDeregisterVehicle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RegistrationDeregisterVehicleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deregister_vehicle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RegistrationDeregisterVehicleResult{}
  var err2 error
  if err2 = p.handler.DeregisterVehicle(args.VehicleID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deregister_vehicle: " + err2.Error())
    oprot.WriteMessageBegin("deregister_vehicle", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("deregister_vehicle", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type registrationProcessorVehicleIsRegistered struct {
  handler Registration
}

func (p *registrationProcessorVehicleIsRegistered) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RegistrationVehicleIsRegisteredArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("vehicle_is_registered", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RegistrationVehicleIsRegisteredResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.VehicleIsRegistered(args.VehicleID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing vehicle_is_registered: " + err2.Error())
    oprot.WriteMessageBegin("vehicle_is_registered", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("vehicle_is_registered", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - VehicleDetails
type RegistrationRegisterVehicleArgs struct {
  VehicleDetails *vehicle.VehicleDetails `thrift:"vehicleDetails,1,required" db:"vehicleDetails" json:"vehicleDetails"`
}

func NewRegistrationRegisterVehicleArgs() *RegistrationRegisterVehicleArgs {
  return &RegistrationRegisterVehicleArgs{}
}

var RegistrationRegisterVehicleArgs_VehicleDetails_DEFAULT *vehicle.VehicleDetails
func (p *RegistrationRegisterVehicleArgs) GetVehicleDetails() *vehicle.VehicleDetails {
  if !p.IsSetVehicleDetails() {
    return RegistrationRegisterVehicleArgs_VehicleDetails_DEFAULT
  }
return p.VehicleDetails
}
func (p *RegistrationRegisterVehicleArgs) IsSetVehicleDetails() bool {
  return p.VehicleDetails != nil
}

func (p *RegistrationRegisterVehicleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVehicleDetails bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVehicleDetails = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVehicleDetails{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VehicleDetails is not set"));
  }
  return nil
}

func (p *RegistrationRegisterVehicleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.VehicleDetails = &vehicle.VehicleDetails{}
  if err := p.VehicleDetails.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VehicleDetails), err)
  }
  return nil
}

func (p *RegistrationRegisterVehicleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("register_vehicle_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegistrationRegisterVehicleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleDetails", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicleDetails: ", p), err) }
  if err := p.VehicleDetails.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VehicleDetails), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicleDetails: ", p), err) }
  return err
}

func (p *RegistrationRegisterVehicleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegistrationRegisterVehicleArgs(%+v)", *p)
}

type RegistrationRegisterVehicleResult struct {
}

func NewRegistrationRegisterVehicleResult() *RegistrationRegisterVehicleResult {
  return &RegistrationRegisterVehicleResult{}
}

func (p *RegistrationRegisterVehicleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegistrationRegisterVehicleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("register_vehicle_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegistrationRegisterVehicleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegistrationRegisterVehicleResult(%+v)", *p)
}

// Attributes:
//  - VehicleID
type RegistrationDeregisterVehicleArgs struct {
  VehicleID *davuser.DAVUser `thrift:"vehicleID,1,required" db:"vehicleID" json:"vehicleID"`
}

func NewRegistrationDeregisterVehicleArgs() *RegistrationDeregisterVehicleArgs {
  return &RegistrationDeregisterVehicleArgs{}
}

var RegistrationDeregisterVehicleArgs_VehicleID_DEFAULT *davuser.DAVUser
func (p *RegistrationDeregisterVehicleArgs) GetVehicleID() *davuser.DAVUser {
  if !p.IsSetVehicleID() {
    return RegistrationDeregisterVehicleArgs_VehicleID_DEFAULT
  }
return p.VehicleID
}
func (p *RegistrationDeregisterVehicleArgs) IsSetVehicleID() bool {
  return p.VehicleID != nil
}

func (p *RegistrationDeregisterVehicleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVehicleID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVehicleID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVehicleID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VehicleID is not set"));
  }
  return nil
}

func (p *RegistrationDeregisterVehicleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.VehicleID = &davuser.DAVUser{}
  if err := p.VehicleID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VehicleID), err)
  }
  return nil
}

func (p *RegistrationDeregisterVehicleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deregister_vehicle_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegistrationDeregisterVehicleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleID", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicleID: ", p), err) }
  if err := p.VehicleID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VehicleID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicleID: ", p), err) }
  return err
}

func (p *RegistrationDeregisterVehicleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegistrationDeregisterVehicleArgs(%+v)", *p)
}

type RegistrationDeregisterVehicleResult struct {
}

func NewRegistrationDeregisterVehicleResult() *RegistrationDeregisterVehicleResult {
  return &RegistrationDeregisterVehicleResult{}
}

func (p *RegistrationDeregisterVehicleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegistrationDeregisterVehicleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deregister_vehicle_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegistrationDeregisterVehicleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegistrationDeregisterVehicleResult(%+v)", *p)
}

// Attributes:
//  - VehicleID
type RegistrationVehicleIsRegisteredArgs struct {
  VehicleID *davuser.DAVUser `thrift:"vehicleID,1,required" db:"vehicleID" json:"vehicleID"`
}

func NewRegistrationVehicleIsRegisteredArgs() *RegistrationVehicleIsRegisteredArgs {
  return &RegistrationVehicleIsRegisteredArgs{}
}

var RegistrationVehicleIsRegisteredArgs_VehicleID_DEFAULT *davuser.DAVUser
func (p *RegistrationVehicleIsRegisteredArgs) GetVehicleID() *davuser.DAVUser {
  if !p.IsSetVehicleID() {
    return RegistrationVehicleIsRegisteredArgs_VehicleID_DEFAULT
  }
return p.VehicleID
}
func (p *RegistrationVehicleIsRegisteredArgs) IsSetVehicleID() bool {
  return p.VehicleID != nil
}

func (p *RegistrationVehicleIsRegisteredArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVehicleID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVehicleID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVehicleID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VehicleID is not set"));
  }
  return nil
}

func (p *RegistrationVehicleIsRegisteredArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.VehicleID = &davuser.DAVUser{}
  if err := p.VehicleID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VehicleID), err)
  }
  return nil
}

func (p *RegistrationVehicleIsRegisteredArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("vehicle_is_registered_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegistrationVehicleIsRegisteredArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleID", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicleID: ", p), err) }
  if err := p.VehicleID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VehicleID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicleID: ", p), err) }
  return err
}

func (p *RegistrationVehicleIsRegisteredArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegistrationVehicleIsRegisteredArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RegistrationVehicleIsRegisteredResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRegistrationVehicleIsRegisteredResult() *RegistrationVehicleIsRegisteredResult {
  return &RegistrationVehicleIsRegisteredResult{}
}

var RegistrationVehicleIsRegisteredResult_Success_DEFAULT bool
func (p *RegistrationVehicleIsRegisteredResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RegistrationVehicleIsRegisteredResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RegistrationVehicleIsRegisteredResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RegistrationVehicleIsRegisteredResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegistrationVehicleIsRegisteredResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RegistrationVehicleIsRegisteredResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("vehicle_is_registered_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegistrationVehicleIsRegisteredResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RegistrationVehicleIsRegisteredResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegistrationVehicleIsRegisteredResult(%+v)", *p)
}


