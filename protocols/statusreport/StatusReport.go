// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package statusreport

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/DAVFoundation/captain/protocols/davuser"
	"github.com/DAVFoundation/captain/protocols/vehicle"
	"github.com/DAVFoundation/captain/protocols/types"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = davuser.GoUnusedProtection__
var _ = vehicle.GoUnusedProtection__
var _ = types.GoUnusedProtection__
type StatusReport interface {
  // Parameters:
  //  - VehicleID
  //  - State
  ReportStatus(vehicleID *davuser.DAVUser, state *vehicle.VehicleState) (err error)
}

type StatusReportClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewStatusReportClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StatusReportClient {
  return &StatusReportClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewStatusReportClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StatusReportClient {
  return &StatusReportClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - VehicleID
//  - State
func (p *StatusReportClient) ReportStatus(vehicleID *davuser.DAVUser, state *vehicle.VehicleState) (err error) {
  if err = p.sendReportStatus(vehicleID, state); err != nil { return }
  return p.recvReportStatus()
}

func (p *StatusReportClient) sendReportStatus(vehicleID *davuser.DAVUser, state *vehicle.VehicleState)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("report_status", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := StatusReportReportStatusArgs{
  VehicleID : vehicleID,
  State : state,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *StatusReportClient) recvReportStatus() (err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "report_status" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "report_status failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "report_status failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "report_status failed: invalid message type")
    return
  }
  result := StatusReportReportStatusResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  return
}


type StatusReportProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler StatusReport
}

func (p *StatusReportProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *StatusReportProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *StatusReportProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewStatusReportProcessor(handler StatusReport) *StatusReportProcessor {

  self2 := &StatusReportProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["report_status"] = &statusReportProcessorReportStatus{handler:handler}
return self2
}

func (p *StatusReportProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x3

}

type statusReportProcessorReportStatus struct {
  handler StatusReport
}

func (p *statusReportProcessorReportStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := StatusReportReportStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("report_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := StatusReportReportStatusResult{}
  var err2 error
  if err2 = p.handler.ReportStatus(args.VehicleID, args.State); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing report_status: " + err2.Error())
    oprot.WriteMessageBegin("report_status", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("report_status", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - VehicleID
//  - State
type StatusReportReportStatusArgs struct {
  VehicleID *davuser.DAVUser `thrift:"vehicleID,1,required" db:"vehicleID" json:"vehicleID"`
  State *vehicle.VehicleState `thrift:"state,2,required" db:"state" json:"state"`
}

func NewStatusReportReportStatusArgs() *StatusReportReportStatusArgs {
  return &StatusReportReportStatusArgs{}
}

var StatusReportReportStatusArgs_VehicleID_DEFAULT *davuser.DAVUser
func (p *StatusReportReportStatusArgs) GetVehicleID() *davuser.DAVUser {
  if !p.IsSetVehicleID() {
    return StatusReportReportStatusArgs_VehicleID_DEFAULT
  }
return p.VehicleID
}
var StatusReportReportStatusArgs_State_DEFAULT *vehicle.VehicleState
func (p *StatusReportReportStatusArgs) GetState() *vehicle.VehicleState {
  if !p.IsSetState() {
    return StatusReportReportStatusArgs_State_DEFAULT
  }
return p.State
}
func (p *StatusReportReportStatusArgs) IsSetVehicleID() bool {
  return p.VehicleID != nil
}

func (p *StatusReportReportStatusArgs) IsSetState() bool {
  return p.State != nil
}

func (p *StatusReportReportStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVehicleID bool = false;
  var issetState bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVehicleID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetState = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVehicleID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VehicleID is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  return nil
}

func (p *StatusReportReportStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.VehicleID = &davuser.DAVUser{}
  if err := p.VehicleID.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VehicleID), err)
  }
  return nil
}

func (p *StatusReportReportStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.State = &vehicle.VehicleState{}
  if err := p.State.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.State), err)
  }
  return nil
}

func (p *StatusReportReportStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("report_status_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatusReportReportStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vehicleID", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:vehicleID: ", p), err) }
  if err := p.VehicleID.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VehicleID), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:vehicleID: ", p), err) }
  return err
}

func (p *StatusReportReportStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err) }
  if err := p.State.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.State), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err) }
  return err
}

func (p *StatusReportReportStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatusReportReportStatusArgs(%+v)", *p)
}

type StatusReportReportStatusResult struct {
}

func NewStatusReportReportStatusResult() *StatusReportReportStatusResult {
  return &StatusReportReportStatusResult{}
}

func (p *StatusReportReportStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatusReportReportStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("report_status_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatusReportReportStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatusReportReportStatusResult(%+v)", *p)
}


